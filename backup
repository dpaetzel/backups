#!/usr/bin/env fish


# TODO Add backups of plugged in external drives and exclude Backup/ folders on periphery
# TODO Get this running under Windows/cleopatra
# TODO Use different target lists for different machines
# TODO Consider to use a general exclude file and additional exclude files for each target


# A table of drive names (usually their filesystem labels but can be anything;
# is just used within this script for helping user understand what's going on)
# and filesystem UUIDs.
set drives \
    d2-seagate-5tb 5c105a36-8a71-4b0f-a558-86c307b9452f \
    d3-sandisk-1tb 2a715088-facc-4f02-af28-8033fbcb7a1f


# A list of directories to back up.
set targets \
    "$HOME" \
    /mnt/HoefflCloud


set exclude_file (dirname (status --current-filename))/excludes.txt
echo "Using exclude file $exclude_file …"


# `seq 1 2 n` creates a list of 1 to n with step width 2.
for idx in (seq 1 2 (count $drives))
    set name $drives[$idx]
    set uuid $drives[(math $idx + 1)]

    # Try to mount.
    udiskie-mount $uuid

    # Find the mount point.
    set mnt (findmnt -S UUID=$uuid -o Target --noheadings)
    # This will probably not happen because $status is 1 if `findmnt` doesn't
    # find the UUID.
    if test \( $status -ne 0 \)
        echo "$name not plugged in, continuing …"
        continue
    end
    and echo "Detected $name mounted at $mnt."

    and echo "Backing up to $name mounted at $mnt …"
    and set repopath "$mnt"/Backups/(hostname)
    # If there's no repo yet, initialize a new one.
    and if test ! -f "$repopath"/config
        mkdir -p "$repopath"
        and restic --repo "$repopath" init
    end

    and for target in $targets
        echo "Starting backup of $target …"
        and restic --repo "$repopath" --verbose \
            backup \
            --exclude-file $exclude_file \
            "$target"
    end

    restic --repo "$repopath" snapshots

    # and restic --repo "$repopath" check
    # and restic --repo "$repopath" check --read-data-subset=10%
    # TODO Maybe add a check that depending on the number of snapshots checks
    # --read-data-subset=x/5 where x changes between 1,2,3,4,5 (so that all
    # --packs are checked every 5 snapshots or so)
end


echo "No more drives left to backup to."


# TODO Consider `restic forget` and `restic prune` to get back space (i.e.
# remove early snapshots and the files they referenced)
